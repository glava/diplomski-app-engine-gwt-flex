<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 addedToStage="group1_addedToStageHandler(event)"
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="300" xmlns:parsley="http://www.spicefactory.org/parsley">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import control.ToDoModelLocator;
			
			import events.AuthenticateUserEvent;
			
			import model.ToDoLaUser;
			
			import mx.binding.utils.BindingUtils;
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			
			[MessageDispatcher]
			public var dispatcher:Function;
			[Inject]
			public var toDoModelLocator:ToDoModelLocator;
			protected function clickHandler(event:MouseEvent):void
			{
				if (currentState == 'Register')
				{
					register();
				}
				{
					login();	
				}
				
			}
			
			public function register():void
			{
				var newToDouser:ToDoLaUser = new ToDoLaUser();
				newToDouser.username = userid.text;
				newToDouser.password = password.text;
				dispatcher(new AuthenticateUserEvent(AuthenticateUserEvent.REGISTER_USER,newToDouser,true));
			}
			public function login():void
			{
				var newToDouser:ToDoLaUser = new ToDoLaUser();
				newToDouser.username = userid.text;
				newToDouser.password = password.text;
				dispatcher(new AuthenticateUserEvent(AuthenticateUserEvent.LOGIN_USER,newToDouser,true));
			}

			protected function group1_addedToStageHandler(event:Event):void
			{
				dispatchEvent(new Event("configureView", true));
			}
			
			[MessageHandler(type="events.AuthenticateUserEvent", selector="Log.In.User.Failed")]
			public function loginFailed(event:AuthenticateUserEvent):void
			{
				idErrorLabel.text = "Login problem: username/password incorrect!";
			}

		]]>
	</fx:Script>
	
	
	<!-- The Application class states property defines the view states.--> 
	<s:states> 
		<s:State name="default"/>    
		<s:State name="Register"/> 
	</s:states> 
	
	<!-- Define the transition to animate the change of view state. --> 
	<s:transitions> 
		<s:Transition fromState="default"> 
			<s:Parallel> 
				<mx:Resize target="{loginPanel}" duration="100"/> 
			</s:Parallel> 
		</s:Transition> 
		<s:Transition fromState="Register"> 
			<s:Sequence> 
				<mx:Resize target="{loginPanel}" duration="100"/> 
			</s:Sequence> 
		</s:Transition> 
	</s:transitions> 
	
	
		<s:Panel id="loginPanel" horizontalCenter="0" verticalCenter="0"
				 title="Login" title.Register="Register" height="170"> 
			<s:layout> 
				<s:VerticalLayout/> 
			</s:layout>        
			<mx:Form id="loginForm" defaultButton="{button1}"> 
				<mx:FormItem  label="Username:"> 
					<s:TextInput id="userid"/> 
				</mx:FormItem> 
				<mx:FormItem label="Password:"> 
					<s:TextInput id="password" displayAsPassword="true"/> 
				</mx:FormItem> 
				<!-- Add a TextInput control to the form for the Register view state. --> 
				          
				<mx:FormItem direction="horizontal" > 
					<!-- Use the LinkButton to change to the Register view state.--> 
					<!-- Exclude the LinkButton from the Register view state.-->    
					<!-- Add a LinkButton to the form for the Register view state. --> 
					<mx:LinkButton label="Return to Login" 
								   includeIn="Register" 
								   click="currentState=''"/> 
					<mx:Spacer width="100%" id="spacer1"/> 
					<!-- Set label of the control based on the view state.--> 
					<mx:LinkButton id="registerLink" color="0x336699"
								   includeIn="default" 
								   label="Need to Register?" 
								   click="currentState='Register'"/> 
					<s:Button id="button1" click="clickHandler(event)"
							  label="Login" label.Register="Register"/> 
				</mx:FormItem>            
				<s:Label includeIn="default" width="223" height="30" id="idErrorLabel" color="#E61D1D"/>
			</mx:Form> 
		</s:Panel>     
	
</s:Group>
